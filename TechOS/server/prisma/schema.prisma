generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id                     String   @id @default(uuid())
  createdAt              DateTime @default(now())
  name                   String
  type                   String   // school | university | institute
  address                String?
  latitude               Float?
  longitude              Float?
  attendanceRadiusMeters Int      @default(100)

  campuses    Campus[]
  users       User[]
  courses     Course[]
  events      CalendarEvent[]
  materials   Material[]
  evaluations Evaluation[]
  grades      Grade[]
  attendances Attendance[]
}

model Campus {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  institutionId  String
  name           String
  latitude       Float
  longitude      Float
  radiusMeters   Int      @default(100)

  institution Institution @relation(fields: [institutionId], references: [id])
  schedules   Schedule[]
}

// Supabase auth user is external; we store reference
model User {
  id             String   @id
  institutionId  String
  email          String?
  role           String   // admin | teacher | student | representative | superadmin
  firstName      String?
  lastName       String?
  createdAt      DateTime @default(now())

  institution     Institution     @relation(fields: [institutionId], references: [id])
  courses         Course[]        @relation("CourseTeacher")
  attendances     Attendance[]
  grades          Grade[]
  materialsUploaded Material[]
  calendarEvents  CalendarEvent[]
}

model Course {
  id             String   @id @default(uuid())
  institutionId  String
  name           String
  teacherId      String?
  createdAt      DateTime @default(now())

  institution    Institution     @relation(fields: [institutionId], references: [id])
  teacher        User?           @relation("CourseTeacher", fields: [teacherId], references: [id])
  schedules      Schedule[]
  materials      Material[]
  evaluations    Evaluation[]
  attendances    Attendance[]
  calendarEvents CalendarEvent[]
}

model Schedule {
  id        String   @id @default(uuid())
  courseId  String
  dayOfWeek Int      // 0-6
  startTime String
  endTime   String
  campusId  String?

  course Course  @relation(fields: [courseId], references: [id])
  campus Campus? @relation(fields: [campusId], references: [id])
}

model Attendance {
  id             String   @id @default(uuid())
  institutionId  String
  userId         String
  courseId       String
  timestamp      DateTime @default(now())
  status         String   // presente | ausente
  latitude       Float?
  longitude      Float?

  institution Institution @relation(fields: [institutionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  course      Course      @relation(fields: [courseId], references: [id])
}

model CalendarEvent {
  id             String   @id @default(uuid())
  institutionId  String
  title          String
  description    String?
  type           String   // exam | workshop | delivery | event
  courseId       String?
  startsAt       DateTime
  endsAt         DateTime
  createdById    String?

  institution Institution @relation(fields: [institutionId], references: [id])
  course      Course?     @relation(fields: [courseId], references: [id])
  createdBy   User?       @relation(fields: [createdById], references: [id])
}

model Material {
  id             String   @id @default(uuid())
  institutionId  String
  courseId       String
  title          String
  filePath       String
  uploadedById   String
  createdAt      DateTime @default(now())

  institution Institution @relation(fields: [institutionId], references: [id])
  course      Course      @relation(fields: [courseId], references: [id])
  uploadedBy  User        @relation(fields: [uploadedById], references: [id])
}

model Evaluation {
  id             String   @id @default(uuid())
  institutionId  String
  courseId       String
  title          String
  weight         Float    @default(1)
  date           DateTime
  createdAt      DateTime @default(now())

  institution Institution @relation(fields: [institutionId], references: [id])
  course      Course      @relation(fields: [courseId], references: [id])
  grades      Grade[]
}

model Grade {
  id             String   @id @default(uuid())
  institutionId  String
  studentId      String
  evaluationId   String
  value          Float
  createdAt      DateTime @default(now())

  institution Institution @relation(fields: [institutionId], references: [id])
  student     User        @relation(fields: [studentId], references: [id])
  evaluation  Evaluation  @relation(fields: [evaluationId], references: [id])
}


